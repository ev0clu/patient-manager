// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String        @id @default(uuid())
  email        String        @unique
  password     String
  username     String
  phone        String
  appointments Appointment[]
  role         Role          @default(USER)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Doctor {
  id           String        @id @default(uuid())
  name         String
  image        String
  slots        Slot[]
  appointments Appointment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Appointment {
  id          String  @id @default(uuid())
  doctor      Doctor? @relation(fields: [doctorId], references: [id], onDelete: Cascade)
  doctorId    String?
  description String?
  status      Status  @default(PENDING)
  slot        Slot?   @relation(fields: [slotId], references: [id], onDelete: Cascade)
  slotId      String? @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
}

model Slot {
  id     String   @id @default(uuid())
  date   DateTime
  booked Boolean  @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  doctor      Doctor?      @relation(fields: [doctorId], references: [id], onDelete: Cascade)
  doctorId    String?
  appointment Appointment?
}

enum Role {
  USER
  ADMIN
}

enum Status {
  PENDING
  SCHEDULED
  CANCELLED
}
